datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int    @id @default(autoincrement())
  externalId        String @unique @default(uuid()) @map("external_id")
  username          String @unique
  email             String @unique
  password          String
  userPreferencesId Int?

  userPreferences     UserPreferences[]
  plans               Plan[]
  sentFriendships     Friendship[]        @relation("SentFriendships")
  receivedFriendships Friendship[]        @relation("ReceivedFriendships")
  OrganizationUsers   OrganizationUsers[]
  Organization        Organization[]

  @@map("users")
}

model Friendship {
  id          Int      @id @default(autoincrement())
  externalId  String   @unique @default(uuid()) @map("external_id")
  requesterId Int
  receiverId  Int
  status      String // e.g., 'pending', 'accepted', 'blocked'
  createdAt   DateTime @default(now())

  receiver  User @relation("SentFriendships", fields: [receiverId], references: [id])
  requester User @relation("ReceivedFriendships", fields: [requesterId], references: [id])

  @@map("friendships")
}

model OrganizationUsers {
  organizationId Int @map("organization_id")
  userId         Int @map("user_id")

  organization Organization @relation("Organization", fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  @@id(name: "organizationUsersId", [userId, organizationId])
  @@map("organization_users")
}

model Organization {
  id         Int      @id @default(autoincrement())
  externalId String   @unique @default(uuid()) @map("external_id")
  name       String
  createdAt  DateTime @default(now())
  ownerId    Int?     @map("owner_id")

  owner             User?               @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  organizationUsers OrganizationUsers[] @relation("Organization")
  plan              Plan[]              @relation("OrganizationPlan")
}

model UserPreferences {
  userId        Int @map("user_id")
  preferencesId Int @map("preferences_id")

  preference Preferences @relation(fields: [preferencesId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@id(name: "userPreferencesId", [userId, preferencesId])
  @@map("user_preferences")
}

model Preferences {
  id              Int               @id @default(autoincrement())
  externalId      String            @unique @default(uuid()) @map("external_id")
  name            String
  UserPreferences UserPreferences[]
}

model Plan {
  id             Int      @id @default(autoincrement())
  externalId     String   @unique @default(uuid()) @map("external_id")
  destination    String
  country        String
  description    String
  startDate      DateTime
  endDate        DateTime
  spendingLevel  String
  hosting        String?
  latitude       Decimal
  longitude      Decimal
  userId         Int      @map("user_id")
  organizationId Int?     @map("organization_id")

  user         User          @relation(fields: [userId], references: [id])
  TripDay      TripDay[]
  organization Organization? @relation("OrganizationPlan", fields: [organizationId], references: [id], onDelete: SetNull)

  @@map("plans")
}

model TouristActivity {
  id          Int     @id @default(autoincrement())
  externalId  String  @unique @default(uuid()) @map("external_id")
  name        String
  description String
  latitude    Decimal
  longitude   Decimal
  photoPath   String? @map("photo_path")

  TripDay   TripDay? @relation(fields: [tripDayId], references: [id])
  tripDayId Int?

  @@map("tourist_spots")
}

model TripDay {
  id          Int      @id @default(autoincrement())
  externalId  String   @unique @default(uuid()) @map("external_id")
  date        DateTime
  expense     String
  weather     String?
  averageTemp Decimal? @map("average_temp")

  planId     Int               @map("plan_id")
  plan       Plan              @relation(fields: [planId], references: [id])
  activities TouristActivity[]

  @@map("trip_days")
}
